// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: xstream.proto

package xstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XStream_OnApproached_FullMethodName = "/xstream.XStream/OnApproached"
	XStream_SendStream_FullMethodName   = "/xstream.XStream/SendStream"
)

// XStreamClient is the client API for XStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XStreamClient interface {
	// 收到来自其他端点的请求
	OnApproached(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Request, Request], error)
	// 给其他端点发送请求
	SendStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error)
}

type xStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewXStreamClient(cc grpc.ClientConnInterface) XStreamClient {
	return &xStreamClient{cc}
}

func (c *xStreamClient) OnApproached(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Request, Request], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XStream_ServiceDesc.Streams[0], XStream_OnApproached_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Request]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XStream_OnApproachedClient = grpc.ClientStreamingClient[Request, Request]

func (c *xStreamClient) SendStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XStream_ServiceDesc.Streams[1], XStream_SendStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XStream_SendStreamClient = grpc.ServerStreamingClient[Response]

// XStreamServer is the server API for XStream service.
// All implementations must embed UnimplementedXStreamServer
// for forward compatibility.
type XStreamServer interface {
	// 收到来自其他端点的请求
	OnApproached(grpc.ClientStreamingServer[Request, Request]) error
	// 给其他端点发送请求
	SendStream(*Request, grpc.ServerStreamingServer[Response]) error
	mustEmbedUnimplementedXStreamServer()
}

// UnimplementedXStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXStreamServer struct{}

func (UnimplementedXStreamServer) OnApproached(grpc.ClientStreamingServer[Request, Request]) error {
	return status.Errorf(codes.Unimplemented, "method OnApproached not implemented")
}
func (UnimplementedXStreamServer) SendStream(*Request, grpc.ServerStreamingServer[Response]) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedXStreamServer) mustEmbedUnimplementedXStreamServer() {}
func (UnimplementedXStreamServer) testEmbeddedByValue()                 {}

// UnsafeXStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XStreamServer will
// result in compilation errors.
type UnsafeXStreamServer interface {
	mustEmbedUnimplementedXStreamServer()
}

func RegisterXStreamServer(s grpc.ServiceRegistrar, srv XStreamServer) {
	// If the following call pancis, it indicates UnimplementedXStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XStream_ServiceDesc, srv)
}

func _XStream_OnApproached_Handler(srv any, stream grpc.ServerStream) error {
	return srv.(XStreamServer).OnApproached(&grpc.GenericServerStream[Request, Request]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XStream_OnApproachedServer = grpc.ClientStreamingServer[Request, Request]

func _XStream_SendStream_Handler(srv any, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XStreamServer).SendStream(m, &grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XStream_SendStreamServer = grpc.ServerStreamingServer[Response]

// XStream_ServiceDesc is the grpc.ServiceDesc for XStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xstream.XStream",
	HandlerType: (*XStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnApproached",
			Handler:       _XStream_OnApproached_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendStream",
			Handler:       _XStream_SendStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xstream.proto",
}
