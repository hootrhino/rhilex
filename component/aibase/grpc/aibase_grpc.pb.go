// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: aibase.proto

package aibase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AIBaseService_Call_FullMethodName   = "/aibase.AIBaseService/Call"
	AIBaseService_Stream_FullMethodName = "/aibase.AIBaseService/Stream"
)

// AIBaseServiceClient is the client API for AIBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIBaseServiceClient interface {
	// 普通请求
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// 流式请求
	Stream(ctx context.Context, opts ...grpc.CallOption) (AIBaseService_StreamClient, error)
}

type aIBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIBaseServiceClient(cc grpc.ClientConnInterface) AIBaseServiceClient {
	return &aIBaseServiceClient{cc}
}

func (c *aIBaseServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, AIBaseService_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIBaseServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (AIBaseService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AIBaseService_ServiceDesc.Streams[0], AIBaseService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aIBaseServiceStreamClient{stream}
	return x, nil
}

type AIBaseService_StreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type aIBaseServiceStreamClient struct {
	grpc.ClientStream
}

func (x *aIBaseServiceStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aIBaseServiceStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AIBaseServiceServer is the server API for AIBaseService service.
// All implementations must embed UnimplementedAIBaseServiceServer
// for forward compatibility
type AIBaseServiceServer interface {
	// 普通请求
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// 流式请求
	Stream(AIBaseService_StreamServer) error
	mustEmbedUnimplementedAIBaseServiceServer()
}

// UnimplementedAIBaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAIBaseServiceServer struct {
}

func (UnimplementedAIBaseServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedAIBaseServiceServer) Stream(AIBaseService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedAIBaseServiceServer) mustEmbedUnimplementedAIBaseServiceServer() {}

// UnsafeAIBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIBaseServiceServer will
// result in compilation errors.
type UnsafeAIBaseServiceServer interface {
	mustEmbedUnimplementedAIBaseServiceServer()
}

func RegisterAIBaseServiceServer(s grpc.ServiceRegistrar, srv AIBaseServiceServer) {
	s.RegisterService(&AIBaseService_ServiceDesc, srv)
}

func _AIBaseService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIBaseServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIBaseService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIBaseServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIBaseService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AIBaseServiceServer).Stream(&aIBaseServiceStreamServer{stream})
}

type AIBaseService_StreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type aIBaseServiceStreamServer struct {
	grpc.ServerStream
}

func (x *aIBaseServiceStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aIBaseServiceStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AIBaseService_ServiceDesc is the grpc.ServiceDesc for AIBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aibase.AIBaseService",
	HandlerType: (*AIBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _AIBaseService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _AIBaseService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aibase.proto",
}
