// Copyright (C) 2024 wwhai
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package haas506

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"text/template"
	"time"
)

const wifiConfigTemplate = `#
# GENERATED BY RHILEX, DON'T MODIFY THIS CONFIG!!!
#
update_config=1

network={
    priority=1
    ssid="{{.SSID}}"
    psk="{{.PSK}}"
    key_mgmt=WPA-PSK
    proto=RSN
    pairwise=CCMP
    auth_alg=OPEN
}
`

func SetWifi(iface, ssid, psk string, timeout time.Duration) error {
	if len(psk) < 8 {
		return fmt.Errorf("password must be at least 8 characters long")
	}
	configData := struct {
		SSID string
		PSK  string
	}{
		SSID: ssid,
		PSK:  psk,
	}
	tmpl, err := template.New("wifiConfig").Parse(wifiConfigTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse template: %v", err)
	}
	configFilePath := fmt.Sprintf("/etc/wpa_supplicant/wpa_supplicant-%s.conf", iface)
	// configFilePath := fmt.Sprintf("./data/wpa_supplicant-%s.conf", iface)
	file, err := os.OpenFile(configFilePath, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0600)
	if err != nil {
		return fmt.Errorf("failed to open config file: %v", err)
	}
	defer file.Close()
	err = tmpl.Execute(file, configData)
	if err != nil {
		return fmt.Errorf("failed to execute template: %v", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()
	{

		cmd := exec.CommandContext(ctx, "pkill", "wpa_supplicant")
		if err := cmd.Run(); err != nil {
			return fmt.Errorf("failed to terminate wpa_supplicant: %v", err)
		}
	}
	{

		cmd := exec.CommandContext(ctx, "wpa_supplicant", "-B", "-i", iface, "-c", configFilePath)
		if err := cmd.Start(); err != nil {
			return fmt.Errorf("failed to start wpa_supplicant: %v", err)
		}
	}
	{

		cmd := exec.CommandContext(ctx, "udhcpc", "-i", iface)
		if err := cmd.Start(); err != nil {
			return fmt.Errorf("failed to start wpa_supplicant: %v", err)
		}
	}
	select {
	case <-time.After(5 * time.Second):
	case <-ctx.Done():
		return ctx.Err()
	}
	return nil
}
